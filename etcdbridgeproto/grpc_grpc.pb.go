// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: grpc.proto

package etcdbridgeproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerInfoService_Add_FullMethodName     = "/etcd_bridge.ServerInfoService/Add"
	ServerInfoService_Update_FullMethodName  = "/etcd_bridge.ServerInfoService/Update"
	ServerInfoService_Del_FullMethodName     = "/etcd_bridge.ServerInfoService/Del"
	ServerInfoService_Get_FullMethodName     = "/etcd_bridge.ServerInfoService/Get"
	ServerInfoService_GetList_FullMethodName = "/etcd_bridge.ServerInfoService/GetList"
)

// ServerInfoServiceClient is the client API for ServerInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerInfoServiceClient interface {
	Add(ctx context.Context, in *SaveServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Update(ctx context.Context, in *SaveServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Del(ctx context.Context, in *DelSaveServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Get(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetList(ctx context.Context, in *ServerInfoLisRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type serverInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerInfoServiceClient(cc grpc.ClientConnInterface) ServerInfoServiceClient {
	return &serverInfoServiceClient{cc}
}

func (c *serverInfoServiceClient) Add(ctx context.Context, in *SaveServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ServerInfoService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInfoServiceClient) Update(ctx context.Context, in *SaveServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ServerInfoService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInfoServiceClient) Del(ctx context.Context, in *DelSaveServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ServerInfoService_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInfoServiceClient) Get(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ServerInfoService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInfoServiceClient) GetList(ctx context.Context, in *ServerInfoLisRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, ServerInfoService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerInfoServiceServer is the server API for ServerInfoService service.
// All implementations must embed UnimplementedServerInfoServiceServer
// for forward compatibility
type ServerInfoServiceServer interface {
	Add(context.Context, *SaveServerInfoRequest) (*BaseResponse, error)
	Update(context.Context, *SaveServerInfoRequest) (*BaseResponse, error)
	Del(context.Context, *DelSaveServerInfoRequest) (*BaseResponse, error)
	Get(context.Context, *GetServerInfoRequest) (*BaseResponse, error)
	GetList(context.Context, *ServerInfoLisRequest) (*BaseResponse, error)
	mustEmbedUnimplementedServerInfoServiceServer()
}

// UnimplementedServerInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerInfoServiceServer struct {
}

func (UnimplementedServerInfoServiceServer) Add(context.Context, *SaveServerInfoRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedServerInfoServiceServer) Update(context.Context, *SaveServerInfoRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServerInfoServiceServer) Del(context.Context, *DelSaveServerInfoRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedServerInfoServiceServer) Get(context.Context, *GetServerInfoRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServerInfoServiceServer) GetList(context.Context, *ServerInfoLisRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedServerInfoServiceServer) mustEmbedUnimplementedServerInfoServiceServer() {}

// UnsafeServerInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerInfoServiceServer will
// result in compilation errors.
type UnsafeServerInfoServiceServer interface {
	mustEmbedUnimplementedServerInfoServiceServer()
}

func RegisterServerInfoServiceServer(s grpc.ServiceRegistrar, srv ServerInfoServiceServer) {
	s.RegisterService(&ServerInfoService_ServiceDesc, srv)
}

func _ServerInfoService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerInfoService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServiceServer).Add(ctx, req.(*SaveServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInfoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerInfoService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServiceServer).Update(ctx, req.(*SaveServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInfoService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSaveServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerInfoService_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServiceServer).Del(ctx, req.(*DelSaveServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInfoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerInfoService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServiceServer).Get(ctx, req.(*GetServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInfoService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoLisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerInfoService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServiceServer).GetList(ctx, req.(*ServerInfoLisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerInfoService_ServiceDesc is the grpc.ServiceDesc for ServerInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etcd_bridge.ServerInfoService",
	HandlerType: (*ServerInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ServerInfoService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServerInfoService_Update_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _ServerInfoService_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServerInfoService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ServerInfoService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

const (
	SyncConfService_Add_FullMethodName     = "/etcd_bridge.SyncConfService/Add"
	SyncConfService_Update_FullMethodName  = "/etcd_bridge.SyncConfService/Update"
	SyncConfService_Del_FullMethodName     = "/etcd_bridge.SyncConfService/Del"
	SyncConfService_Get_FullMethodName     = "/etcd_bridge.SyncConfService/Get"
	SyncConfService_GetList_FullMethodName = "/etcd_bridge.SyncConfService/GetList"
	SyncConfService_Action_FullMethodName  = "/etcd_bridge.SyncConfService/Action"
)

// SyncConfServiceClient is the client API for SyncConfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncConfServiceClient interface {
	Add(ctx context.Context, in *SaveSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Update(ctx context.Context, in *SaveSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Del(ctx context.Context, in *DelSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Get(ctx context.Context, in *GetSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetList(ctx context.Context, in *SyncConfListRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Action(ctx context.Context, in *SyncConfActionRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type syncConfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncConfServiceClient(cc grpc.ClientConnInterface) SyncConfServiceClient {
	return &syncConfServiceClient{cc}
}

func (c *syncConfServiceClient) Add(ctx context.Context, in *SaveSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SyncConfService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncConfServiceClient) Update(ctx context.Context, in *SaveSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SyncConfService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncConfServiceClient) Del(ctx context.Context, in *DelSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SyncConfService_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncConfServiceClient) Get(ctx context.Context, in *GetSyncConfRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SyncConfService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncConfServiceClient) GetList(ctx context.Context, in *SyncConfListRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SyncConfService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncConfServiceClient) Action(ctx context.Context, in *SyncConfActionRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SyncConfService_Action_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncConfServiceServer is the server API for SyncConfService service.
// All implementations must embed UnimplementedSyncConfServiceServer
// for forward compatibility
type SyncConfServiceServer interface {
	Add(context.Context, *SaveSyncConfRequest) (*BaseResponse, error)
	Update(context.Context, *SaveSyncConfRequest) (*BaseResponse, error)
	Del(context.Context, *DelSyncConfRequest) (*BaseResponse, error)
	Get(context.Context, *GetSyncConfRequest) (*BaseResponse, error)
	GetList(context.Context, *SyncConfListRequest) (*BaseResponse, error)
	Action(context.Context, *SyncConfActionRequest) (*BaseResponse, error)
	mustEmbedUnimplementedSyncConfServiceServer()
}

// UnimplementedSyncConfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncConfServiceServer struct {
}

func (UnimplementedSyncConfServiceServer) Add(context.Context, *SaveSyncConfRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedSyncConfServiceServer) Update(context.Context, *SaveSyncConfRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSyncConfServiceServer) Del(context.Context, *DelSyncConfRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedSyncConfServiceServer) Get(context.Context, *GetSyncConfRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSyncConfServiceServer) GetList(context.Context, *SyncConfListRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSyncConfServiceServer) Action(context.Context, *SyncConfActionRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedSyncConfServiceServer) mustEmbedUnimplementedSyncConfServiceServer() {}

// UnsafeSyncConfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncConfServiceServer will
// result in compilation errors.
type UnsafeSyncConfServiceServer interface {
	mustEmbedUnimplementedSyncConfServiceServer()
}

func RegisterSyncConfServiceServer(s grpc.ServiceRegistrar, srv SyncConfServiceServer) {
	s.RegisterService(&SyncConfService_ServiceDesc, srv)
}

func _SyncConfService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSyncConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncConfService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfServiceServer).Add(ctx, req.(*SaveSyncConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncConfService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSyncConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncConfService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfServiceServer).Update(ctx, req.(*SaveSyncConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncConfService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSyncConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncConfService_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfServiceServer).Del(ctx, req.(*DelSyncConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncConfService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncConfService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfServiceServer).Get(ctx, req.(*GetSyncConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncConfService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncConfListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncConfService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfServiceServer).GetList(ctx, req.(*SyncConfListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncConfService_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncConfActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfServiceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncConfService_Action_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfServiceServer).Action(ctx, req.(*SyncConfActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncConfService_ServiceDesc is the grpc.ServiceDesc for SyncConfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncConfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etcd_bridge.SyncConfService",
	HandlerType: (*SyncConfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _SyncConfService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SyncConfService_Update_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _SyncConfService_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SyncConfService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SyncConfService_GetList_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _SyncConfService_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

const (
	UsersService_Add_FullMethodName     = "/etcd_bridge.UsersService/Add"
	UsersService_Update_FullMethodName  = "/etcd_bridge.UsersService/Update"
	UsersService_Del_FullMethodName     = "/etcd_bridge.UsersService/Del"
	UsersService_Get_FullMethodName     = "/etcd_bridge.UsersService/Get"
	UsersService_GetList_FullMethodName = "/etcd_bridge.UsersService/GetList"
	UsersService_Login_FullMethodName   = "/etcd_bridge.UsersService/Login"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	Add(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Update(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Del(ctx context.Context, in *DelUsersRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Get(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetList(ctx context.Context, in *UsersLisRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) Add(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, UsersService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Update(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, UsersService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Del(ctx context.Context, in *DelUsersRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, UsersService_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Get(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, UsersService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetList(ctx context.Context, in *UsersLisRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, UsersService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, UsersService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	Add(context.Context, *UsersRequest) (*BaseResponse, error)
	Update(context.Context, *UsersRequest) (*BaseResponse, error)
	Del(context.Context, *DelUsersRequest) (*BaseResponse, error)
	Get(context.Context, *UsersRequest) (*BaseResponse, error)
	GetList(context.Context, *UsersLisRequest) (*BaseResponse, error)
	Login(context.Context, *LoginRequest) (*BaseResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) Add(context.Context, *UsersRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUsersServiceServer) Update(context.Context, *UsersRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUsersServiceServer) Del(context.Context, *DelUsersRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedUsersServiceServer) Get(context.Context, *UsersRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsersServiceServer) GetList(context.Context, *UsersLisRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedUsersServiceServer) Login(context.Context, *LoginRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Add(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Update(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Del(ctx, req.(*DelUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Get(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersLisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetList(ctx, req.(*UsersLisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etcd_bridge.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UsersService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UsersService_Update_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _UsersService_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UsersService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _UsersService_GetList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UsersService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

const (
	RolesService_Add_FullMethodName                 = "/etcd_bridge.RolesService/Add"
	RolesService_DelRole_FullMethodName             = "/etcd_bridge.RolesService/DelRole"
	RolesService_GetList_FullMethodName             = "/etcd_bridge.RolesService/GetList"
	RolesService_GetRolesPermissions_FullMethodName = "/etcd_bridge.RolesService/GetRolesPermissions"
	RolesService_DelRolesPermissions_FullMethodName = "/etcd_bridge.RolesService/DelRolesPermissions"
	RolesService_AddRoleForUser_FullMethodName      = "/etcd_bridge.RolesService/AddRoleForUser"
	RolesService_DelUserRole_FullMethodName         = "/etcd_bridge.RolesService/DelUserRole"
)

// RolesServiceClient is the client API for RolesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolesServiceClient interface {
	Add(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DelRole(ctx context.Context, in *RoleDelRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetList(ctx context.Context, in *RolesLisRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetRolesPermissions(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DelRolesPermissions(ctx context.Context, in *RolesPermissionsDelRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DelUserRole(ctx context.Context, in *DelRoleForUserRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type rolesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolesServiceClient(cc grpc.ClientConnInterface) RolesServiceClient {
	return &rolesServiceClient{cc}
}

func (c *rolesServiceClient) Add(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DelRole(ctx context.Context, in *RoleDelRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_DelRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) GetList(ctx context.Context, in *RolesLisRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) GetRolesPermissions(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_GetRolesPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DelRolesPermissions(ctx context.Context, in *RolesPermissionsDelRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_DelRolesPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_AddRoleForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DelUserRole(ctx context.Context, in *DelRoleForUserRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, RolesService_DelUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolesServiceServer is the server API for RolesService service.
// All implementations must embed UnimplementedRolesServiceServer
// for forward compatibility
type RolesServiceServer interface {
	Add(context.Context, *RolesRequest) (*BaseResponse, error)
	DelRole(context.Context, *RoleDelRequest) (*BaseResponse, error)
	GetList(context.Context, *RolesLisRequest) (*BaseResponse, error)
	GetRolesPermissions(context.Context, *RolesRequest) (*BaseResponse, error)
	DelRolesPermissions(context.Context, *RolesPermissionsDelRequest) (*BaseResponse, error)
	AddRoleForUser(context.Context, *AddRoleForUserRequest) (*BaseResponse, error)
	DelUserRole(context.Context, *DelRoleForUserRequest) (*BaseResponse, error)
	mustEmbedUnimplementedRolesServiceServer()
}

// UnimplementedRolesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolesServiceServer struct {
}

func (UnimplementedRolesServiceServer) Add(context.Context, *RolesRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRolesServiceServer) DelRole(context.Context, *RoleDelRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (UnimplementedRolesServiceServer) GetList(context.Context, *RolesLisRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedRolesServiceServer) GetRolesPermissions(context.Context, *RolesRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesPermissions not implemented")
}
func (UnimplementedRolesServiceServer) DelRolesPermissions(context.Context, *RolesPermissionsDelRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRolesPermissions not implemented")
}
func (UnimplementedRolesServiceServer) AddRoleForUser(context.Context, *AddRoleForUserRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (UnimplementedRolesServiceServer) DelUserRole(context.Context, *DelRoleForUserRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserRole not implemented")
}
func (UnimplementedRolesServiceServer) mustEmbedUnimplementedRolesServiceServer() {}

// UnsafeRolesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolesServiceServer will
// result in compilation errors.
type UnsafeRolesServiceServer interface {
	mustEmbedUnimplementedRolesServiceServer()
}

func RegisterRolesServiceServer(s grpc.ServiceRegistrar, srv RolesServiceServer) {
	s.RegisterService(&RolesService_ServiceDesc, srv)
}

func _RolesService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).Add(ctx, req.(*RolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_DelRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DelRole(ctx, req.(*RoleDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesLisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).GetList(ctx, req.(*RolesLisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_GetRolesPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).GetRolesPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_GetRolesPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).GetRolesPermissions(ctx, req.(*RolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DelRolesPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesPermissionsDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DelRolesPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_DelRolesPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DelRolesPermissions(ctx, req.(*RolesPermissionsDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_AddRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).AddRoleForUser(ctx, req.(*AddRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DelUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DelUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_DelUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DelUserRole(ctx, req.(*DelRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolesService_ServiceDesc is the grpc.ServiceDesc for RolesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etcd_bridge.RolesService",
	HandlerType: (*RolesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _RolesService_Add_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _RolesService_DelRole_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _RolesService_GetList_Handler,
		},
		{
			MethodName: "GetRolesPermissions",
			Handler:    _RolesService_GetRolesPermissions_Handler,
		},
		{
			MethodName: "DelRolesPermissions",
			Handler:    _RolesService_DelRolesPermissions_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _RolesService_AddRoleForUser_Handler,
		},
		{
			MethodName: "DelUserRole",
			Handler:    _RolesService_DelUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
