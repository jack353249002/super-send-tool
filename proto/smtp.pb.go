// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.9.0
// source: smtp.proto

package proto

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// smtp服务对象
type SmtpServerObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键
	SmtpServer     string `protobuf:"bytes,2,opt,name=smtp_server,json=smtpServer,proto3" json:"smtp_server,omitempty"`              //smtp 服务器主机地址  如 smtp.163.com
	SmtpPassword   string `protobuf:"bytes,3,opt,name=smtp_password,json=smtpPassword,proto3" json:"smtp_password,omitempty"`        //smtp 密码
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                          //标题
	SmtpSendEmail  string `protobuf:"bytes,5,opt,name=smtp_send_email,json=smtpSendEmail,proto3" json:"smtp_send_email,omitempty"`   //smtp  发送的邮箱
	Port           int64  `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`                                           //端口
	MaxConcurrency int64  `protobuf:"varint,7,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"` //最大并发数
}

func (x *SmtpServerObj) Reset() {
	*x = SmtpServerObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmtpServerObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmtpServerObj) ProtoMessage() {}

func (x *SmtpServerObj) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmtpServerObj.ProtoReflect.Descriptor instead.
func (*SmtpServerObj) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{0}
}

func (x *SmtpServerObj) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmtpServerObj) GetSmtpServer() string {
	if x != nil {
		return x.SmtpServer
	}
	return ""
}

func (x *SmtpServerObj) GetSmtpPassword() string {
	if x != nil {
		return x.SmtpPassword
	}
	return ""
}

func (x *SmtpServerObj) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SmtpServerObj) GetSmtpSendEmail() string {
	if x != nil {
		return x.SmtpSendEmail
	}
	return ""
}

func (x *SmtpServerObj) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SmtpServerObj) GetMaxConcurrency() int64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

// 获取smtp列表请求
type GetSmtpListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords string `protobuf:"bytes,1,opt,name=keywords,proto3" json:"keywords,omitempty"` //关键字
	Page     int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`        //页数
	Limit    int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`      //每页条数
}

func (x *GetSmtpListRequest) Reset() {
	*x = GetSmtpListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmtpListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmtpListRequest) ProtoMessage() {}

func (x *GetSmtpListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmtpListRequest.ProtoReflect.Descriptor instead.
func (*GetSmtpListRequest) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{1}
}

func (x *GetSmtpListRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *GetSmtpListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSmtpListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 获取smtp列表响应
type SmtpServerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*SmtpServerObj `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Code    uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      //状态码 0=失败,1=成功
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //信息
	Count   int64            `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SmtpServerListResponse) Reset() {
	*x = SmtpServerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmtpServerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmtpServerListResponse) ProtoMessage() {}

func (x *SmtpServerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmtpServerListResponse.ProtoReflect.Descriptor instead.
func (*SmtpServerListResponse) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{2}
}

func (x *SmtpServerListResponse) GetData() []*SmtpServerObj {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SmtpServerListResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SmtpServerListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SmtpServerListResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 设置smtp请求
type SetSmtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键
	SmtpServer     string `protobuf:"bytes,2,opt,name=smtp_server,json=smtpServer,proto3" json:"smtp_server,omitempty"`              //smtp 服务器主机地址  如 smtp.163.com
	SmtpPassword   string `protobuf:"bytes,3,opt,name=smtp_password,json=smtpPassword,proto3" json:"smtp_password,omitempty"`        //smtp 密码
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                          //标题
	SmtpSendEmail  string `protobuf:"bytes,5,opt,name=smtp_send_email,json=smtpSendEmail,proto3" json:"smtp_send_email,omitempty"`   //smtp 发送的邮箱
	Port           int64  `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`                                           //端口
	MaxConcurrency int64  `protobuf:"varint,7,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"` //最大并发数
}

func (x *SetSmtpRequest) Reset() {
	*x = SetSmtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSmtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSmtpRequest) ProtoMessage() {}

func (x *SetSmtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSmtpRequest.ProtoReflect.Descriptor instead.
func (*SetSmtpRequest) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{3}
}

func (x *SetSmtpRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetSmtpRequest) GetSmtpServer() string {
	if x != nil {
		return x.SmtpServer
	}
	return ""
}

func (x *SetSmtpRequest) GetSmtpPassword() string {
	if x != nil {
		return x.SmtpPassword
	}
	return ""
}

func (x *SetSmtpRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetSmtpRequest) GetSmtpSendEmail() string {
	if x != nil {
		return x.SmtpSendEmail
	}
	return ""
}

func (x *SetSmtpRequest) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SetSmtpRequest) GetMaxConcurrency() int64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

// 删除smtp请求
type DelSmtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //smtp 主键
}

func (x *DelSmtpRequest) Reset() {
	*x = DelSmtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSmtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSmtpRequest) ProtoMessage() {}

func (x *DelSmtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSmtpRequest.ProtoReflect.Descriptor instead.
func (*DelSmtpRequest) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{4}
}

func (x *DelSmtpRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SmtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      //状态码 0=失败,1=成功
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //信息
}

func (x *SmtpResponse) Reset() {
	*x = SmtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmtpResponse) ProtoMessage() {}

func (x *SmtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmtpResponse.ProtoReflect.Descriptor instead.
func (*SmtpResponse) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{5}
}

func (x *SmtpResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SmtpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_smtp_proto protoreflect.FileDescriptor

var file_smtp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6d, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x53, 0x6d, 0x74, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x74, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d,
	0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6d, 0x74, 0x70,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6d, 0x74, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6d,
	0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x6d, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x53, 0x6d, 0x74, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d, 0x74, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x6d, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x74, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6d, 0x74, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6d, 0x74, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x53, 0x6d, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x6d, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xa8, 0x02, 0x0a, 0x0b, 0x53, 0x6d, 0x74, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6d, 0x74,
	0x70, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x6d, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x53, 0x6d, 0x74, 0x70, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x6d, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x6d, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x74, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d, 0x74, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x2e, 0x53, 0x6d, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_smtp_proto_rawDescOnce sync.Once
	file_smtp_proto_rawDescData = file_smtp_proto_rawDesc
)

func file_smtp_proto_rawDescGZIP() []byte {
	file_smtp_proto_rawDescOnce.Do(func() {
		file_smtp_proto_rawDescData = protoimpl.X.CompressGZIP(file_smtp_proto_rawDescData)
	})
	return file_smtp_proto_rawDescData
}

var file_smtp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_smtp_proto_goTypes = []interface{}{
	(*SmtpServerObj)(nil),          // 0: super_send.SmtpServerObj
	(*GetSmtpListRequest)(nil),     // 1: super_send.GetSmtpListRequest
	(*SmtpServerListResponse)(nil), // 2: super_send.SmtpServerListResponse
	(*SetSmtpRequest)(nil),         // 3: super_send.SetSmtpRequest
	(*DelSmtpRequest)(nil),         // 4: super_send.DelSmtpRequest
	(*SmtpResponse)(nil),           // 5: super_send.SmtpResponse
	(*empty.Empty)(nil),            // 6: google.protobuf.Empty
}
var file_smtp_proto_depIdxs = []int32{
	0, // 0: super_send.SmtpServerListResponse.data:type_name -> super_send.SmtpServerObj
	3, // 1: super_send.SmtpService.SetSmtp:input_type -> super_send.SetSmtpRequest
	4, // 2: super_send.SmtpService.DelSmtp:input_type -> super_send.DelSmtpRequest
	1, // 3: super_send.SmtpService.GetSmtpList:input_type -> super_send.GetSmtpListRequest
	6, // 4: super_send.SmtpService.Reload:input_type -> google.protobuf.Empty
	5, // 5: super_send.SmtpService.SetSmtp:output_type -> super_send.SmtpResponse
	5, // 6: super_send.SmtpService.DelSmtp:output_type -> super_send.SmtpResponse
	2, // 7: super_send.SmtpService.GetSmtpList:output_type -> super_send.SmtpServerListResponse
	5, // 8: super_send.SmtpService.Reload:output_type -> super_send.SmtpResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_smtp_proto_init() }
func file_smtp_proto_init() {
	if File_smtp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_smtp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmtpServerObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmtpListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmtpServerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSmtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSmtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smtp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_smtp_proto_goTypes,
		DependencyIndexes: file_smtp_proto_depIdxs,
		MessageInfos:      file_smtp_proto_msgTypes,
	}.Build()
	File_smtp_proto = out.File
	file_smtp_proto_rawDesc = nil
	file_smtp_proto_goTypes = nil
	file_smtp_proto_depIdxs = nil
}
