// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: users.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsersService_MessageSend_FullMethodName = "/UsersService/MessageSend"
	UsersService_Login_FullMethodName       = "/UsersService/Login"
	UsersService_Register_FullMethodName    = "/UsersService/Register"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	MessageSend(ctx context.Context, opts ...grpc.CallOption) (UsersService_MessageSendClient, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginPublicResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterPublicResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) MessageSend(ctx context.Context, opts ...grpc.CallOption) (UsersService_MessageSendClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[0], UsersService_MessageSend_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceMessageSendClient{stream}
	return x, nil
}

type UsersService_MessageSendClient interface {
	Send(*MessageSendRequest) error
	Recv() (*MessageSendResponse, error)
	grpc.ClientStream
}

type usersServiceMessageSendClient struct {
	grpc.ClientStream
}

func (x *usersServiceMessageSendClient) Send(m *MessageSendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersServiceMessageSendClient) Recv() (*MessageSendResponse, error) {
	m := new(MessageSendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginPublicResponse, error) {
	out := new(LoginPublicResponse)
	err := c.cc.Invoke(ctx, UsersService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterPublicResponse, error) {
	out := new(RegisterPublicResponse)
	err := c.cc.Invoke(ctx, UsersService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	MessageSend(UsersService_MessageSendServer) error
	Login(context.Context, *LoginRequest) (*LoginPublicResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterPublicResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) MessageSend(UsersService_MessageSendServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageSend not implemented")
}
func (UnimplementedUsersServiceServer) Login(context.Context, *LoginRequest) (*LoginPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServiceServer) Register(context.Context, *RegisterRequest) (*RegisterPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_MessageSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServiceServer).MessageSend(&usersServiceMessageSendServer{stream})
}

type UsersService_MessageSendServer interface {
	Send(*MessageSendResponse) error
	Recv() (*MessageSendRequest, error)
	grpc.ServerStream
}

type usersServiceMessageSendServer struct {
	grpc.ServerStream
}

func (x *usersServiceMessageSendServer) Send(m *MessageSendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersServiceMessageSendServer) Recv() (*MessageSendRequest, error) {
	m := new(MessageSendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UsersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UsersService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UsersService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageSend",
			Handler:       _UsersService_MessageSend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "users.proto",
}
