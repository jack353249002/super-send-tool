// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: imap.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImapService_SetImap_FullMethodName        = "/super_send.ImapService/SetImap"
	ImapService_DelImap_FullMethodName        = "/super_send.ImapService/DelImap"
	ImapService_GetImapList_FullMethodName    = "/super_send.ImapService/GetImapList"
	ImapService_Reload_FullMethodName         = "/super_send.ImapService/Reload"
	ImapService_GetImapAllList_FullMethodName = "/super_send.ImapService/GetImapAllList"
)

// ImapServiceClient is the client API for ImapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImapServiceClient interface {
	SetImap(ctx context.Context, in *SetImapRequest, opts ...grpc.CallOption) (*SetImapResponse, error)
	DelImap(ctx context.Context, in *DelImapRequest, opts ...grpc.CallOption) (*SetImapResponse, error)
	GetImapList(ctx context.Context, in *GetImapListRequest, opts ...grpc.CallOption) (*ImapServerListResponse, error)
	Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SetImapResponse, error)
	GetImapAllList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImapServerListResponse, error)
}

type imapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImapServiceClient(cc grpc.ClientConnInterface) ImapServiceClient {
	return &imapServiceClient{cc}
}

func (c *imapServiceClient) SetImap(ctx context.Context, in *SetImapRequest, opts ...grpc.CallOption) (*SetImapResponse, error) {
	out := new(SetImapResponse)
	err := c.cc.Invoke(ctx, ImapService_SetImap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapServiceClient) DelImap(ctx context.Context, in *DelImapRequest, opts ...grpc.CallOption) (*SetImapResponse, error) {
	out := new(SetImapResponse)
	err := c.cc.Invoke(ctx, ImapService_DelImap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapServiceClient) GetImapList(ctx context.Context, in *GetImapListRequest, opts ...grpc.CallOption) (*ImapServerListResponse, error) {
	out := new(ImapServerListResponse)
	err := c.cc.Invoke(ctx, ImapService_GetImapList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapServiceClient) Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SetImapResponse, error) {
	out := new(SetImapResponse)
	err := c.cc.Invoke(ctx, ImapService_Reload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapServiceClient) GetImapAllList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImapServerListResponse, error) {
	out := new(ImapServerListResponse)
	err := c.cc.Invoke(ctx, ImapService_GetImapAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImapServiceServer is the server API for ImapService service.
// All implementations must embed UnimplementedImapServiceServer
// for forward compatibility
type ImapServiceServer interface {
	SetImap(context.Context, *SetImapRequest) (*SetImapResponse, error)
	DelImap(context.Context, *DelImapRequest) (*SetImapResponse, error)
	GetImapList(context.Context, *GetImapListRequest) (*ImapServerListResponse, error)
	Reload(context.Context, *empty.Empty) (*SetImapResponse, error)
	GetImapAllList(context.Context, *empty.Empty) (*ImapServerListResponse, error)
	mustEmbedUnimplementedImapServiceServer()
}

// UnimplementedImapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImapServiceServer struct {
}

func (UnimplementedImapServiceServer) SetImap(context.Context, *SetImapRequest) (*SetImapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetImap not implemented")
}
func (UnimplementedImapServiceServer) DelImap(context.Context, *DelImapRequest) (*SetImapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelImap not implemented")
}
func (UnimplementedImapServiceServer) GetImapList(context.Context, *GetImapListRequest) (*ImapServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImapList not implemented")
}
func (UnimplementedImapServiceServer) Reload(context.Context, *empty.Empty) (*SetImapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedImapServiceServer) GetImapAllList(context.Context, *empty.Empty) (*ImapServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImapAllList not implemented")
}
func (UnimplementedImapServiceServer) mustEmbedUnimplementedImapServiceServer() {}

// UnsafeImapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImapServiceServer will
// result in compilation errors.
type UnsafeImapServiceServer interface {
	mustEmbedUnimplementedImapServiceServer()
}

func RegisterImapServiceServer(s grpc.ServiceRegistrar, srv ImapServiceServer) {
	s.RegisterService(&ImapService_ServiceDesc, srv)
}

func _ImapService_SetImap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetImapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapServiceServer).SetImap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImapService_SetImap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapServiceServer).SetImap(ctx, req.(*SetImapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapService_DelImap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelImapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapServiceServer).DelImap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImapService_DelImap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapServiceServer).DelImap(ctx, req.(*DelImapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapService_GetImapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapServiceServer).GetImapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImapService_GetImapList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapServiceServer).GetImapList(ctx, req.(*GetImapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImapService_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapServiceServer).Reload(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapService_GetImapAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapServiceServer).GetImapAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImapService_GetImapAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapServiceServer).GetImapAllList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ImapService_ServiceDesc is the grpc.ServiceDesc for ImapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "super_send.ImapService",
	HandlerType: (*ImapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetImap",
			Handler:    _ImapService_SetImap_Handler,
		},
		{
			MethodName: "DelImap",
			Handler:    _ImapService_DelImap_Handler,
		},
		{
			MethodName: "GetImapList",
			Handler:    _ImapService_GetImapList_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _ImapService_Reload_Handler,
		},
		{
			MethodName: "GetImapAllList",
			Handler:    _ImapService_GetImapAllList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imap.proto",
}
