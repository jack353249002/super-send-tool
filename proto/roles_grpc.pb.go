// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: roles.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RolesService_Add_FullMethodName                 = "/RolesService/Add"
	RolesService_GetList_FullMethodName             = "/RolesService/GetList"
	RolesService_GetRolesPermissions_FullMethodName = "/RolesService/GetRolesPermissions"
	RolesService_DelRolesPermissions_FullMethodName = "/RolesService/DelRolesPermissions"
	RolesService_DelRole_FullMethodName             = "/RolesService/DelRole"
	RolesService_DelUserRole_FullMethodName         = "/RolesService/DelUserRole"
	RolesService_AddRoleForUser_FullMethodName      = "/RolesService/AddRoleForUser"
)

// RolesServiceClient is the client API for RolesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolesServiceClient interface {
	Add(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	GetList(ctx context.Context, in *RolesLisRequest, opts ...grpc.CallOption) (*RolesListResponse, error)
	GetRolesPermissions(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*RolesPermissionsListResponse, error)
	DelRolesPermissions(ctx context.Context, in *RolesPermissionsDelRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	DelRole(ctx context.Context, in *RoleDelRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	DelUserRole(ctx context.Context, in *DelRoleForUserRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...grpc.CallOption) (*RolesResponse, error)
}

type rolesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolesServiceClient(cc grpc.ClientConnInterface) RolesServiceClient {
	return &rolesServiceClient{cc}
}

func (c *rolesServiceClient) Add(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, RolesService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) GetList(ctx context.Context, in *RolesLisRequest, opts ...grpc.CallOption) (*RolesListResponse, error) {
	out := new(RolesListResponse)
	err := c.cc.Invoke(ctx, RolesService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) GetRolesPermissions(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*RolesPermissionsListResponse, error) {
	out := new(RolesPermissionsListResponse)
	err := c.cc.Invoke(ctx, RolesService_GetRolesPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DelRolesPermissions(ctx context.Context, in *RolesPermissionsDelRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, RolesService_DelRolesPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DelRole(ctx context.Context, in *RoleDelRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, RolesService_DelRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DelUserRole(ctx context.Context, in *DelRoleForUserRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, RolesService_DelUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, RolesService_AddRoleForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolesServiceServer is the server API for RolesService service.
// All implementations must embed UnimplementedRolesServiceServer
// for forward compatibility
type RolesServiceServer interface {
	Add(context.Context, *RolesRequest) (*RolesResponse, error)
	GetList(context.Context, *RolesLisRequest) (*RolesListResponse, error)
	GetRolesPermissions(context.Context, *RolesRequest) (*RolesPermissionsListResponse, error)
	DelRolesPermissions(context.Context, *RolesPermissionsDelRequest) (*RolesResponse, error)
	DelRole(context.Context, *RoleDelRequest) (*RolesResponse, error)
	DelUserRole(context.Context, *DelRoleForUserRequest) (*RolesResponse, error)
	AddRoleForUser(context.Context, *AddRoleForUserRequest) (*RolesResponse, error)
	mustEmbedUnimplementedRolesServiceServer()
}

// UnimplementedRolesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolesServiceServer struct {
}

func (UnimplementedRolesServiceServer) Add(context.Context, *RolesRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRolesServiceServer) GetList(context.Context, *RolesLisRequest) (*RolesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedRolesServiceServer) GetRolesPermissions(context.Context, *RolesRequest) (*RolesPermissionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesPermissions not implemented")
}
func (UnimplementedRolesServiceServer) DelRolesPermissions(context.Context, *RolesPermissionsDelRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRolesPermissions not implemented")
}
func (UnimplementedRolesServiceServer) DelRole(context.Context, *RoleDelRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (UnimplementedRolesServiceServer) DelUserRole(context.Context, *DelRoleForUserRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserRole not implemented")
}
func (UnimplementedRolesServiceServer) AddRoleForUser(context.Context, *AddRoleForUserRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (UnimplementedRolesServiceServer) mustEmbedUnimplementedRolesServiceServer() {}

// UnsafeRolesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolesServiceServer will
// result in compilation errors.
type UnsafeRolesServiceServer interface {
	mustEmbedUnimplementedRolesServiceServer()
}

func RegisterRolesServiceServer(s grpc.ServiceRegistrar, srv RolesServiceServer) {
	s.RegisterService(&RolesService_ServiceDesc, srv)
}

func _RolesService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).Add(ctx, req.(*RolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesLisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).GetList(ctx, req.(*RolesLisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_GetRolesPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).GetRolesPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_GetRolesPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).GetRolesPermissions(ctx, req.(*RolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DelRolesPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesPermissionsDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DelRolesPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_DelRolesPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DelRolesPermissions(ctx, req.(*RolesPermissionsDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_DelRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DelRole(ctx, req.(*RoleDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DelUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DelUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_DelUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DelUserRole(ctx, req.(*DelRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_AddRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).AddRoleForUser(ctx, req.(*AddRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolesService_ServiceDesc is the grpc.ServiceDesc for RolesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RolesService",
	HandlerType: (*RolesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _RolesService_Add_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _RolesService_GetList_Handler,
		},
		{
			MethodName: "GetRolesPermissions",
			Handler:    _RolesService_GetRolesPermissions_Handler,
		},
		{
			MethodName: "DelRolesPermissions",
			Handler:    _RolesService_DelRolesPermissions_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _RolesService_DelRole_Handler,
		},
		{
			MethodName: "DelUserRole",
			Handler:    _RolesService_DelUserRole_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _RolesService_AddRoleForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roles.proto",
}
