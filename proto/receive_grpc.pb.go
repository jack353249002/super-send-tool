// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: receive.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReceiveService_AddReceive_FullMethodName            = "/super_send.ReceiveService/AddReceive"
	ReceiveService_GetReceiveMessages_FullMethodName    = "/super_send.ReceiveService/GetReceiveMessages"
	ReceiveService_GetReceiveMessageInfo_FullMethodName = "/super_send.ReceiveService/GetReceiveMessageInfo"
	ReceiveService_ReceiveAction_FullMethodName         = "/super_send.ReceiveService/ReceiveAction"
	ReceiveService_GetReceiveList_FullMethodName        = "/super_send.ReceiveService/GetReceiveList"
	ReceiveService_SetReceive_FullMethodName            = "/super_send.ReceiveService/SetReceive"
)

// ReceiveServiceClient is the client API for ReceiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiveServiceClient interface {
	// 添加接收规则
	AddReceive(ctx context.Context, in *SetReceiveRequest, opts ...grpc.CallOption) (*SetReceiveRequestResponse, error)
	// 获取接收邮件列表
	GetReceiveMessages(ctx context.Context, in *GetReceiveMessageListRequest, opts ...grpc.CallOption) (*GetReceiveMessageListResponse, error)
	// 获取接收邮件信息详情
	GetReceiveMessageInfo(ctx context.Context, in *GetReceiveMessageInfoRequest, opts ...grpc.CallOption) (*GetReceiveMessageInfoResponse, error)
	// 邮件接收器控制
	ReceiveAction(ctx context.Context, in *ReceiveActionRequest, opts ...grpc.CallOption) (*ReceiveActionResponse, error)
	// 获取邮件接收规则列表
	GetReceiveList(ctx context.Context, in *ReceiveListRequest, opts ...grpc.CallOption) (*GetReceiveListResponse, error)
	// 设置接收规则
	SetReceive(ctx context.Context, in *SetReceiveRequest, opts ...grpc.CallOption) (*SetReceiveRequestResponse, error)
}

type receiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiveServiceClient(cc grpc.ClientConnInterface) ReceiveServiceClient {
	return &receiveServiceClient{cc}
}

func (c *receiveServiceClient) AddReceive(ctx context.Context, in *SetReceiveRequest, opts ...grpc.CallOption) (*SetReceiveRequestResponse, error) {
	out := new(SetReceiveRequestResponse)
	err := c.cc.Invoke(ctx, ReceiveService_AddReceive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) GetReceiveMessages(ctx context.Context, in *GetReceiveMessageListRequest, opts ...grpc.CallOption) (*GetReceiveMessageListResponse, error) {
	out := new(GetReceiveMessageListResponse)
	err := c.cc.Invoke(ctx, ReceiveService_GetReceiveMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) GetReceiveMessageInfo(ctx context.Context, in *GetReceiveMessageInfoRequest, opts ...grpc.CallOption) (*GetReceiveMessageInfoResponse, error) {
	out := new(GetReceiveMessageInfoResponse)
	err := c.cc.Invoke(ctx, ReceiveService_GetReceiveMessageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) ReceiveAction(ctx context.Context, in *ReceiveActionRequest, opts ...grpc.CallOption) (*ReceiveActionResponse, error) {
	out := new(ReceiveActionResponse)
	err := c.cc.Invoke(ctx, ReceiveService_ReceiveAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) GetReceiveList(ctx context.Context, in *ReceiveListRequest, opts ...grpc.CallOption) (*GetReceiveListResponse, error) {
	out := new(GetReceiveListResponse)
	err := c.cc.Invoke(ctx, ReceiveService_GetReceiveList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) SetReceive(ctx context.Context, in *SetReceiveRequest, opts ...grpc.CallOption) (*SetReceiveRequestResponse, error) {
	out := new(SetReceiveRequestResponse)
	err := c.cc.Invoke(ctx, ReceiveService_SetReceive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiveServiceServer is the server API for ReceiveService service.
// All implementations must embed UnimplementedReceiveServiceServer
// for forward compatibility
type ReceiveServiceServer interface {
	// 添加接收规则
	AddReceive(context.Context, *SetReceiveRequest) (*SetReceiveRequestResponse, error)
	// 获取接收邮件列表
	GetReceiveMessages(context.Context, *GetReceiveMessageListRequest) (*GetReceiveMessageListResponse, error)
	// 获取接收邮件信息详情
	GetReceiveMessageInfo(context.Context, *GetReceiveMessageInfoRequest) (*GetReceiveMessageInfoResponse, error)
	// 邮件接收器控制
	ReceiveAction(context.Context, *ReceiveActionRequest) (*ReceiveActionResponse, error)
	// 获取邮件接收规则列表
	GetReceiveList(context.Context, *ReceiveListRequest) (*GetReceiveListResponse, error)
	// 设置接收规则
	SetReceive(context.Context, *SetReceiveRequest) (*SetReceiveRequestResponse, error)
	mustEmbedUnimplementedReceiveServiceServer()
}

// UnimplementedReceiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReceiveServiceServer struct {
}

func (UnimplementedReceiveServiceServer) AddReceive(context.Context, *SetReceiveRequest) (*SetReceiveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReceive not implemented")
}
func (UnimplementedReceiveServiceServer) GetReceiveMessages(context.Context, *GetReceiveMessageListRequest) (*GetReceiveMessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiveMessages not implemented")
}
func (UnimplementedReceiveServiceServer) GetReceiveMessageInfo(context.Context, *GetReceiveMessageInfoRequest) (*GetReceiveMessageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiveMessageInfo not implemented")
}
func (UnimplementedReceiveServiceServer) ReceiveAction(context.Context, *ReceiveActionRequest) (*ReceiveActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAction not implemented")
}
func (UnimplementedReceiveServiceServer) GetReceiveList(context.Context, *ReceiveListRequest) (*GetReceiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiveList not implemented")
}
func (UnimplementedReceiveServiceServer) SetReceive(context.Context, *SetReceiveRequest) (*SetReceiveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReceive not implemented")
}
func (UnimplementedReceiveServiceServer) mustEmbedUnimplementedReceiveServiceServer() {}

// UnsafeReceiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiveServiceServer will
// result in compilation errors.
type UnsafeReceiveServiceServer interface {
	mustEmbedUnimplementedReceiveServiceServer()
}

func RegisterReceiveServiceServer(s grpc.ServiceRegistrar, srv ReceiveServiceServer) {
	s.RegisterService(&ReceiveService_ServiceDesc, srv)
}

func _ReceiveService_AddReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).AddReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_AddReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).AddReceive(ctx, req.(*SetReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_GetReceiveMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiveMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).GetReceiveMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_GetReceiveMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).GetReceiveMessages(ctx, req.(*GetReceiveMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_GetReceiveMessageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiveMessageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).GetReceiveMessageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_GetReceiveMessageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).GetReceiveMessageInfo(ctx, req.(*GetReceiveMessageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_ReceiveAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).ReceiveAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_ReceiveAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).ReceiveAction(ctx, req.(*ReceiveActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_GetReceiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).GetReceiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_GetReceiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).GetReceiveList(ctx, req.(*ReceiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_SetReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).SetReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_SetReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).SetReceive(ctx, req.(*SetReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiveService_ServiceDesc is the grpc.ServiceDesc for ReceiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "super_send.ReceiveService",
	HandlerType: (*ReceiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReceive",
			Handler:    _ReceiveService_AddReceive_Handler,
		},
		{
			MethodName: "GetReceiveMessages",
			Handler:    _ReceiveService_GetReceiveMessages_Handler,
		},
		{
			MethodName: "GetReceiveMessageInfo",
			Handler:    _ReceiveService_GetReceiveMessageInfo_Handler,
		},
		{
			MethodName: "ReceiveAction",
			Handler:    _ReceiveService_ReceiveAction_Handler,
		},
		{
			MethodName: "GetReceiveList",
			Handler:    _ReceiveService_GetReceiveList_Handler,
		},
		{
			MethodName: "SetReceive",
			Handler:    _ReceiveService_SetReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receive.proto",
}
