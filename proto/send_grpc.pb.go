// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: send.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SendService_SetSend_FullMethodName           = "/SendService/SetSend"
	SendService_SendInfo_FullMethodName          = "/SendService/SendInfo"
	SendService_GetSendInfoList_FullMethodName   = "/SendService/GetSendInfoList"
	SendService_GetSendList_FullMethodName       = "/SendService/GetSendList"
	SendService_SendInfoAction_FullMethodName    = "/SendService/SendInfoAction"
	SendService_SetSendInfo_FullMethodName       = "/SendService/SetSendInfo"
	SendService_GetSmtpServerList_FullMethodName = "/SendService/GetSmtpServerList"
)

// SendServiceClient is the client API for SendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendServiceClient interface {
	SetSend(ctx context.Context, in *AddSendRequest, opts ...grpc.CallOption) (*AddSendResponse, error)
	SendInfo(ctx context.Context, in *SendInfoRequest, opts ...grpc.CallOption) (*SendInfoResponse, error)
	GetSendInfoList(ctx context.Context, in *GetSendInfoListRequest, opts ...grpc.CallOption) (*GetSendInfoListResponse, error)
	GetSendList(ctx context.Context, in *GetSendListRequest, opts ...grpc.CallOption) (*GetSendListResponse, error)
	SendInfoAction(ctx context.Context, in *SendInfoActionRequest, opts ...grpc.CallOption) (*SendInfoActionResponse, error)
	SetSendInfo(ctx context.Context, in *EditSendRequest, opts ...grpc.CallOption) (*AddSendResponse, error)
	GetSmtpServerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SmtpServerResponse, error)
}

type sendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendServiceClient(cc grpc.ClientConnInterface) SendServiceClient {
	return &sendServiceClient{cc}
}

func (c *sendServiceClient) SetSend(ctx context.Context, in *AddSendRequest, opts ...grpc.CallOption) (*AddSendResponse, error) {
	out := new(AddSendResponse)
	err := c.cc.Invoke(ctx, SendService_SetSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) SendInfo(ctx context.Context, in *SendInfoRequest, opts ...grpc.CallOption) (*SendInfoResponse, error) {
	out := new(SendInfoResponse)
	err := c.cc.Invoke(ctx, SendService_SendInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) GetSendInfoList(ctx context.Context, in *GetSendInfoListRequest, opts ...grpc.CallOption) (*GetSendInfoListResponse, error) {
	out := new(GetSendInfoListResponse)
	err := c.cc.Invoke(ctx, SendService_GetSendInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) GetSendList(ctx context.Context, in *GetSendListRequest, opts ...grpc.CallOption) (*GetSendListResponse, error) {
	out := new(GetSendListResponse)
	err := c.cc.Invoke(ctx, SendService_GetSendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) SendInfoAction(ctx context.Context, in *SendInfoActionRequest, opts ...grpc.CallOption) (*SendInfoActionResponse, error) {
	out := new(SendInfoActionResponse)
	err := c.cc.Invoke(ctx, SendService_SendInfoAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) SetSendInfo(ctx context.Context, in *EditSendRequest, opts ...grpc.CallOption) (*AddSendResponse, error) {
	out := new(AddSendResponse)
	err := c.cc.Invoke(ctx, SendService_SetSendInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) GetSmtpServerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SmtpServerResponse, error) {
	out := new(SmtpServerResponse)
	err := c.cc.Invoke(ctx, SendService_GetSmtpServerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendServiceServer is the server API for SendService service.
// All implementations must embed UnimplementedSendServiceServer
// for forward compatibility
type SendServiceServer interface {
	SetSend(context.Context, *AddSendRequest) (*AddSendResponse, error)
	SendInfo(context.Context, *SendInfoRequest) (*SendInfoResponse, error)
	GetSendInfoList(context.Context, *GetSendInfoListRequest) (*GetSendInfoListResponse, error)
	GetSendList(context.Context, *GetSendListRequest) (*GetSendListResponse, error)
	SendInfoAction(context.Context, *SendInfoActionRequest) (*SendInfoActionResponse, error)
	SetSendInfo(context.Context, *EditSendRequest) (*AddSendResponse, error)
	GetSmtpServerList(context.Context, *empty.Empty) (*SmtpServerResponse, error)
	mustEmbedUnimplementedSendServiceServer()
}

// UnimplementedSendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSendServiceServer struct {
}

func (UnimplementedSendServiceServer) SetSend(context.Context, *AddSendRequest) (*AddSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSend not implemented")
}
func (UnimplementedSendServiceServer) SendInfo(context.Context, *SendInfoRequest) (*SendInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInfo not implemented")
}
func (UnimplementedSendServiceServer) GetSendInfoList(context.Context, *GetSendInfoListRequest) (*GetSendInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendInfoList not implemented")
}
func (UnimplementedSendServiceServer) GetSendList(context.Context, *GetSendListRequest) (*GetSendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendList not implemented")
}
func (UnimplementedSendServiceServer) SendInfoAction(context.Context, *SendInfoActionRequest) (*SendInfoActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInfoAction not implemented")
}
func (UnimplementedSendServiceServer) SetSendInfo(context.Context, *EditSendRequest) (*AddSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSendInfo not implemented")
}
func (UnimplementedSendServiceServer) GetSmtpServerList(context.Context, *empty.Empty) (*SmtpServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmtpServerList not implemented")
}
func (UnimplementedSendServiceServer) mustEmbedUnimplementedSendServiceServer() {}

// UnsafeSendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServiceServer will
// result in compilation errors.
type UnsafeSendServiceServer interface {
	mustEmbedUnimplementedSendServiceServer()
}

func RegisterSendServiceServer(s grpc.ServiceRegistrar, srv SendServiceServer) {
	s.RegisterService(&SendService_ServiceDesc, srv)
}

func _SendService_SetSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SetSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_SetSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SetSend(ctx, req.(*AddSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_SendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_SendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SendInfo(ctx, req.(*SendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_GetSendInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).GetSendInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_GetSendInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).GetSendInfoList(ctx, req.(*GetSendInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_GetSendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).GetSendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_GetSendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).GetSendList(ctx, req.(*GetSendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_SendInfoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInfoActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SendInfoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_SendInfoAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SendInfoAction(ctx, req.(*SendInfoActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_SetSendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SetSendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_SetSendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SetSendInfo(ctx, req.(*EditSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_GetSmtpServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).GetSmtpServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_GetSmtpServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).GetSmtpServerList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SendService_ServiceDesc is the grpc.ServiceDesc for SendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SendService",
	HandlerType: (*SendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSend",
			Handler:    _SendService_SetSend_Handler,
		},
		{
			MethodName: "SendInfo",
			Handler:    _SendService_SendInfo_Handler,
		},
		{
			MethodName: "GetSendInfoList",
			Handler:    _SendService_GetSendInfoList_Handler,
		},
		{
			MethodName: "GetSendList",
			Handler:    _SendService_GetSendList_Handler,
		},
		{
			MethodName: "SendInfoAction",
			Handler:    _SendService_SendInfoAction_Handler,
		},
		{
			MethodName: "SetSendInfo",
			Handler:    _SendService_SetSendInfo_Handler,
		},
		{
			MethodName: "GetSmtpServerList",
			Handler:    _SendService_GetSmtpServerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "send.proto",
}
