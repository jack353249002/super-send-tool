// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.0
// source: smtp.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmtpService_SetSmtp_FullMethodName     = "/SmtpService/SetSmtp"
	SmtpService_DelSmtp_FullMethodName     = "/SmtpService/DelSmtp"
	SmtpService_GetSmtpList_FullMethodName = "/SmtpService/GetSmtpList"
	SmtpService_Reload_FullMethodName      = "/SmtpService/Reload"
)

// SmtpServiceClient is the client API for SmtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmtpServiceClient interface {
	SetSmtp(ctx context.Context, in *SetSmtpRequest, opts ...grpc.CallOption) (*SetSmtpResponse, error)
	DelSmtp(ctx context.Context, in *DelSmtpRequest, opts ...grpc.CallOption) (*SetSmtpResponse, error)
	GetSmtpList(ctx context.Context, in *GetSmtpListRequest, opts ...grpc.CallOption) (*SmtpServerListResponse, error)
	Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SmtpService_ReloadClient, error)
}

type smtpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmtpServiceClient(cc grpc.ClientConnInterface) SmtpServiceClient {
	return &smtpServiceClient{cc}
}

func (c *smtpServiceClient) SetSmtp(ctx context.Context, in *SetSmtpRequest, opts ...grpc.CallOption) (*SetSmtpResponse, error) {
	out := new(SetSmtpResponse)
	err := c.cc.Invoke(ctx, SmtpService_SetSmtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smtpServiceClient) DelSmtp(ctx context.Context, in *DelSmtpRequest, opts ...grpc.CallOption) (*SetSmtpResponse, error) {
	out := new(SetSmtpResponse)
	err := c.cc.Invoke(ctx, SmtpService_DelSmtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smtpServiceClient) GetSmtpList(ctx context.Context, in *GetSmtpListRequest, opts ...grpc.CallOption) (*SmtpServerListResponse, error) {
	out := new(SmtpServerListResponse)
	err := c.cc.Invoke(ctx, SmtpService_GetSmtpList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smtpServiceClient) Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SmtpService_ReloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &SmtpService_ServiceDesc.Streams[0], SmtpService_Reload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &smtpServiceReloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmtpService_ReloadClient interface {
	Recv() (*SetSmtpResponse, error)
	grpc.ClientStream
}

type smtpServiceReloadClient struct {
	grpc.ClientStream
}

func (x *smtpServiceReloadClient) Recv() (*SetSmtpResponse, error) {
	m := new(SetSmtpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SmtpServiceServer is the server API for SmtpService service.
// All implementations must embed UnimplementedSmtpServiceServer
// for forward compatibility
type SmtpServiceServer interface {
	SetSmtp(context.Context, *SetSmtpRequest) (*SetSmtpResponse, error)
	DelSmtp(context.Context, *DelSmtpRequest) (*SetSmtpResponse, error)
	GetSmtpList(context.Context, *GetSmtpListRequest) (*SmtpServerListResponse, error)
	Reload(*empty.Empty, SmtpService_ReloadServer) error
	mustEmbedUnimplementedSmtpServiceServer()
}

// UnimplementedSmtpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSmtpServiceServer struct {
}

func (UnimplementedSmtpServiceServer) SetSmtp(context.Context, *SetSmtpRequest) (*SetSmtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmtp not implemented")
}
func (UnimplementedSmtpServiceServer) DelSmtp(context.Context, *DelSmtpRequest) (*SetSmtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSmtp not implemented")
}
func (UnimplementedSmtpServiceServer) GetSmtpList(context.Context, *GetSmtpListRequest) (*SmtpServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmtpList not implemented")
}
func (UnimplementedSmtpServiceServer) Reload(*empty.Empty, SmtpService_ReloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedSmtpServiceServer) mustEmbedUnimplementedSmtpServiceServer() {}

// UnsafeSmtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmtpServiceServer will
// result in compilation errors.
type UnsafeSmtpServiceServer interface {
	mustEmbedUnimplementedSmtpServiceServer()
}

func RegisterSmtpServiceServer(s grpc.ServiceRegistrar, srv SmtpServiceServer) {
	s.RegisterService(&SmtpService_ServiceDesc, srv)
}

func _SmtpService_SetSmtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSmtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).SetSmtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmtpService_SetSmtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).SetSmtp(ctx, req.(*SetSmtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmtpService_DelSmtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSmtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).DelSmtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmtpService_DelSmtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).DelSmtp(ctx, req.(*DelSmtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmtpService_GetSmtpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmtpListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).GetSmtpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmtpService_GetSmtpList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).GetSmtpList(ctx, req.(*GetSmtpListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmtpService_Reload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmtpServiceServer).Reload(m, &smtpServiceReloadServer{stream})
}

type SmtpService_ReloadServer interface {
	Send(*SetSmtpResponse) error
	grpc.ServerStream
}

type smtpServiceReloadServer struct {
	grpc.ServerStream
}

func (x *smtpServiceReloadServer) Send(m *SetSmtpResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SmtpService_ServiceDesc is the grpc.ServiceDesc for SmtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SmtpService",
	HandlerType: (*SmtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSmtp",
			Handler:    _SmtpService_SetSmtp_Handler,
		},
		{
			MethodName: "DelSmtp",
			Handler:    _SmtpService_DelSmtp_Handler,
		},
		{
			MethodName: "GetSmtpList",
			Handler:    _SmtpService_GetSmtpList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Reload",
			Handler:       _SmtpService_Reload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "smtp.proto",
}
